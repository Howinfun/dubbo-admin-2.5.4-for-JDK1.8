dubbo.registry.address=zookeeper://127.0.0.1:2181
dubbo.admin.root.password=root
dubbo.admin.guest.password=guest

#dubbo.registry.address=zookeeper://192.168.3.112:2181
#dubbo.admin.root.password=root
#dubbo.admin.guest.password=guest



#<!-- 对包中的所有类进行扫描，以完成Bean创建和自动依赖注入的功能 需要更改 -->
#	<context:component-scan base-package="com.java.spring" />
#	  <!-- 提供方应用名称信息，这个相当于起一个名字，我们dubbo管理页面比较清晰是哪个应用暴露出来的 -->
#   <dubbo:application name="dubbo_provider"></dubbo:application>
#   <!-- 使用zookeeper注册中心暴露服务地址 -->  
#  <!--  <dubbo:registry address="zookeeper://127.0.0.1:2181" check="false" subscribe="false" register=""></dubbo:registry>-->
  
#   <dubbo:registry protocol="zookeeper" address="192.168.3.112:2181" />
#    <dubbo:protocol accesslog="true" name="dubbo" port="20880" />
#  <!-- 要暴露的服务接口 -->  
#  <dubbo:service interface="com.java.spring.provider.service.UserService" ref="userServiceImpl" />  





#<!-- 对包中的所有类进行扫描，以完成Bean创建和自动依赖注入的功能 需要更改 -->
#	<context:component-scan base-package="com.java.spring.consumer" />
	
#	<!-- 消费方应用名，用于计算依赖关系，不是匹配条件，不要与提供方一样 -->  
#   <dubbo:application name="dubbo_consumer" />
  
#    <!-- 使用zookeeper注册中心暴露服务地址 --> 
# <!--  <dubbo:registry address="zookeeper://127.0.0.1:2181" check="false"></dubbo:registry>  -->
#  <dubbo:registry protocol="zookeeper" address="192.168.3.112:2181"/>

#    <!-- 生成远程服务代理，可以像使用本地bean一样使用demoService -->  
#   <dubbo:reference id="userServiceImpl" interface="com.java.spring.provider.service.UserService" />